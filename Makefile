GOCMD=go
GOTEST=$(GOCMD) test
GOVET=$(GOCMD) vet
BINARY_NAME=kube-ns-suspender
VERSION=$(shell git describe --tags)
DOCKER_REGISTRY?=ghcr.io/govirtuo
BUILD_DATE=$(shell date +'%Y-%m-%d_%H:%M:%ST%Z')

# Tooling and testing
KIND_VERSION:=v0.11.1

GREEN  := $(shell tput -Txterm setaf 2)
YELLOW := $(shell tput -Txterm setaf 3)
WHITE  := $(shell tput -Txterm setaf 7)
RESET  := $(shell tput -Txterm sgr0)

MACHINE_ARCH=$(shell uname -m)
ifeq ($(MACHINE_ARCH), aarch64)
	ARCH=arm64
else ifeq ($(MACHINE_ARCH), arm64)
	ARCH=arm64
else ifeq ($(MACHINE_ARCH), x86_64)
	ARCH=amd64
else ifeq ($(MACHINE_ARCH), amd64)
	ARCH=amd64
endif

.PHONY: all build clean

all: help

## Build:
build: ## Build the Go project
	mkdir -p out/bin
	GO111MODULE=on $(GOCMD) build \
		-o out/bin/$(BINARY_NAME) \
		-ldflags="-X 'main.Version=$(VERSION)' -X 'main.BuildDate=$(BUILD_DATE)'" \
		.

clean: ## Clean all the files and binaries generated by the Makefile
	rm -rf ./out

## Test:
test: ## Run the tests of the project
ifeq ($(EXPORT_RESULT), true)
	GO111MODULE=off go get -u github.com/jstemmer/go-junit-report
	$(eval OUTPUT_OPTIONS = | tee /dev/tty | go-junit-report -set-exit-code > junit-report.xml)
endif
	$(GOTEST) -v -race ./... $(OUTPUT_OPTIONS)

coverage: ## Run the tests of the project and export the coverage
	$(GOTEST) -cover -covermode=count -coverprofile=profile.cov ./...
	$(GOCMD) tool cover -func profile.cov
ifeq ($(EXPORT_RESULT), true)
	GO111MODULE=off go get -u github.com/AlekSi/gocov-xml
	GO111MODULE=off go get -u github.com/axw/gocov/gocov
	gocov convert profile.cov | gocov-xml > coverage.xml
endif

e2e: docker-build docker-build-tools e2e_cleanup ## Run End2End tests on a kubernetes cluster
	$(eval TMP_DIR := $(shell mktemp -d))
	$(eval KUBE_CONFIG := "${TMP_DIR}/kube.config")

	@echo '${GREEN}---> Create Kind cluster${RESET}'
	kind create cluster \
		--kubeconfig=${KUBE_CONFIG}\
		--config=./tests/config/kind-config.yaml

	@echo '${GREEN}---> Loading local image into Kind cluster${RESET}'
	kind load docker-image ${DOCKER_REGISTRY}/${BINARY_NAME}:latest --name=kns-test

	@echo '${GREEN}---> Run tests${RESET}'
	docker run --rm -it \
		--network=host \
		--volume "${KUBE_CONFIG}:/root/.kube/config" \
		--volume "${PWD}/tmp/detik/:/tmp/detik/" \
		--volume "${PWD}:/code" \
		--workdir /code \
		local/$(BINARY_NAME)-bats /code/tests/

	@echo '${GREEN}---> Export Kind logs${RESET}'
	mkdir -p tmp/kind
	kind export logs tmp/kind/ --name=kns-test

e2e_cleanup: ## Cleanup End2End resources
	@echo '${GREEN}---> Delete existing Kind cluster (if any)${RESET}'
	kind delete cluster \
		--name=kns-test

	@echo '${GREEN}---> Delete "tmp/" directory ${RESET}'
	rm -rf tmp/
	mkdir -v tmp/

## Docker:
docker-build: ## Use the Dockerfile to build the container
	@echo '${GREEN}---> Build docker container${RESET}'
	docker build --rm --tag $(BINARY_NAME) --build-arg ARCH=${ARCH} --build-arg VERSION=${VERSION} --build-arg BUILD_DATE=$(shell date +%s) .

	@echo '${GREEN}---> Tag as 'latest'${RESET}'
	docker tag $(BINARY_NAME) $(DOCKER_REGISTRY)/$(BINARY_NAME):latest

docker-release: ## Release the container with tag latest and version
	docker tag $(BINARY_NAME) $(DOCKER_REGISTRY)/$(BINARY_NAME):$(VERSION)

	docker push $(DOCKER_REGISTRY)/$(BINARY_NAME):latest
	docker push $(DOCKER_REGISTRY)/$(BINARY_NAME):$(VERSION)

## Tools:
docker-build-tools: ## Use the Dockerfile to build the tools container
	docker build -f tools/Dockerfile.bats -t local/$(BINARY_NAME)-bats tools/

kind-dl: ## Donwload Kind (Kubernetes-in-Docker) for local testing
	$(eval OS := "$(shell uname -s | tr [:upper:] [:lower:])")
	@echo '${GREEN}Downloading Kind ${KIND_VERSION}:${RESET}'
	curl --progress -Lo tools/bin/kind https://kind.sigs.k8s.io/dl/${KIND_VERSION}/kind-${OS}-amd64
	chmod +x tools/bin/kind
	@echo '${YELLOW}Run this command before running e2e tests:${RESET}'
	@echo 'export PATH="$${PWD}/tools/bin:$${PATH}"'

kind-start: ## Start a local Kubernetes cluster
	$(eval TMP_DIR := $(shell mktemp -d))
	$(eval KUBE_CONFIG := "${TMP_DIR}/kube.config")

	@echo '${GREEN}---> Create Kind cluster${RESET}'
	kind create cluster \
		--kubeconfig=${KUBE_CONFIG}\
		--config=./tests/config/kind-config.yaml

kind-stop: e2e_cleanup ## Stop and clean local kind cluster

kind-load: ## Load localy built docker image into Kind cluster
	@echo '${GREEN}---> Loading local image into Kind cluster${RESET}'
	kind load docker-image ${DOCKER_REGISTRY}/${BINARY_NAME}:latest --name=kns-test

## Help:
help: ## Show this help
	@echo ''
	@echo 'Usage:'
	@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} { \
		if (/^[0-9a-zA-Z_-]+:.*?##.*$$/) {printf "    ${YELLOW}%-20s${GREEN}%s${RESET}\n", $$1, $$2} \
		else if (/^## .*$$/) {printf "  ${CYAN}%s${RESET}\n", substr($$1,4)} \
		}' $(MAKEFILE_LIST)

version: ## Display current version
	@echo ${VERSION}
